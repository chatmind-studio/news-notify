from typing import Any

from line import Cog, Context, command
from line.models import (
    CarouselColumn,
    CarouselTemplate,
    PostbackAction,
    QuickReply,
    QuickReplyItem,
)

from ..bot import NewsNotify
from ..models import News, Stock, User
from ..utils import shorten, split_list


class StockCog(Cog):
    def __init__(self, bot: NewsNotify) -> None:
        super().__init__(bot)
        self.bot = bot

    @command
    async def add_company(
        self, ctx: Context, stock_id_or_name: str | None = None
    ) -> Any:
        user = await User.get(id=ctx.user_id).prefetch_related("stocks")

        if stock_id_or_name is None:
            user.temp_data = "cmd=add_company&stock_id_or_name={text}"
            await user.save()
            await ctx.reply_text(
                "Ë´ãËº∏ÂÖ•Ê¨≤Êñ∞Â¢ûÁöÑÂÖ¨Âè∏ÁöÑËÇ°Á•®‰ª£ËôüÊàñÂÖ¨Âè∏Á∞°Á®±\n‰æãÂ¶Ç: „Äå2330„ÄçÊàñ„ÄåÂè∞Á©çÈõª„Äç",
                quick_reply=QuickReply(
                    [
                        QuickReplyItem(
                            action=PostbackAction(label="‚úñÔ∏è ÂèñÊ∂à", data="cmd=cancel")
                        )
                    ]
                ),
            )
        else:
            stock = await self.bot.crawl.fetch_stock(stock_id_or_name)
            if stock is None:
                return await ctx.reply_text(
                    f"‚ùå ÈåØË™§\nÊâæ‰∏çÂà∞Á∞°Á®±Êàñ‰ª£ËôüÁÇ∫„Äå{stock_id_or_name}„ÄçÁöÑËÇ°Á•®",
                    quick_reply=QuickReply(
                        [
                            QuickReplyItem(
                                action=PostbackAction(
                                    label="üîÑÔ∏è ÈáçÊñ∞Ëº∏ÂÖ•",
                                    data="cmd=add_company",
                                    input_option="openKeyboard",
                                )
                            ),
                            QuickReplyItem(
                                action=PostbackAction(label="‚úñÔ∏è ÂèñÊ∂à", data="cmd=cancel")
                            ),
                        ]
                    ),
                )
            db_stock, _ = await Stock.get_or_create(id=stock.id, name=stock.name)
            await db_stock.users.add(user)
            await ctx.reply_text(
                f"‚úÖ ÊàêÂäü\nÂ∑≤Êñ∞Â¢û {db_stock}, ÊÇ®Â∞áÊúÉÈñãÂßãÊî∂Âà∞‰æÜËá™ {db_stock} ÁöÑÈáçÂ§ßË®äÊÅØÈÄöÁü•",
                quick_reply=QuickReply(
                    [
                        QuickReplyItem(
                            action=PostbackAction(
                                label="‚ûï ÁπºÁ∫åÊñ∞Â¢û",
                                data="cmd=add_company",
                                input_option="openKeyboard",
                            )
                        ),
                        QuickReplyItem(
                            action=PostbackAction(label="‚úñÔ∏è ÂÖàÈÄôÊ®£", data="cmd=cancel")
                        ),
                    ]
                ),
            )
        return None

    @command
    async def cancel(self, ctx: Context) -> Any:
        await ctx.reply_text(
            "Â∑≤ÂèñÊ∂à",
            quick_reply=QuickReply(
                [
                    QuickReplyItem(
                        PostbackAction(label="üíº ÁÆ°ÁêÜÂÖ¨Âè∏", data="cmd=view_companies")
                    )
                ]
            ),
        )

    @command
    async def search_company(self, ctx: Context) -> Any:
        user = await User.get(id=ctx.user_id)
        user.temp_data = "cmd=view_companies&stock_id_or_name={text}"
        await user.save()
        await ctx.reply_text(
            "Ë´ãËº∏ÂÖ•Ê¨≤Êü•Ë©¢ÁöÑÂÖ¨Âè∏ÁöÑËÇ°Á•®‰ª£ËôüÊàñÁ∞°Á®±\n‰æãÂ¶Ç:„Äå2330„ÄçÊàñ„ÄåÂè∞Á©çÈõª„Äç",
            quick_reply=QuickReply(
                [QuickReplyItem(PostbackAction(label="‚úñÔ∏è ÂèñÊ∂à", data="cmd=cancel"))]
            ),
        )

    @command
    async def view_companies(
        self, ctx: Context, index: int = 0, stock_id_or_name: str | None = None
    ) -> Any:
        user = await User.get(id=ctx.user_id).prefetch_related("stocks")
        stocks = await user.stocks.all().prefetch_related("news")

        if stock_id_or_name:
            stocks = [
                stock
                for stock in stocks
                if stock_id_or_name in stock.id or stock_id_or_name in stock.name
            ]

        if not stocks:
            return await ctx.reply_text(
                "ÁõÆÂâçÈÇÑÊ≤íÊúâÊñ∞Â¢û‰ªª‰ΩïÂÖ¨Âè∏",
                quick_reply=QuickReply(
                    [
                        QuickReplyItem(
                            PostbackAction(
                                label="‚ûï Êñ∞Â¢ûÂÖ¨Âè∏",
                                data="cmd=add_company",
                                input_option="openKeyboard",
                            )
                        )
                    ]
                ),
            )

        split_stocks = split_list(stocks, 10)
        columns: list[CarouselColumn] = []
        for stock in split_stocks[index]:
            news_count = await stock.news.all().count()
            column = CarouselColumn(
                title=str(stock),
                text=f"ÁõÆÂâçÂ∑≤Êé®Êí≠ÈÅé {news_count} ÂâáÈáçÂ§ßË®äÊÅØ",
                actions=[
                    PostbackAction(
                        "üì¢ Êü•ÁúãÊ≠∑Âè≤ÈáçÂ§ßË®äÊÅØ", data=f"cmd=view_news&stock_id={stock.id}"
                    ),
                    PostbackAction(
                        "‚úñÔ∏è ÂèñÊ∂àËøΩËπ§", data=f"cmd=delete_company&stock_id={stock.id}"
                    ),
                ],
            )
            columns.append(column)

        quick_reply_items: list[QuickReplyItem] = []
        if index > 0:
            quick_reply_items.append(
                QuickReplyItem(
                    action=PostbackAction(
                        label="‚¨ÖÔ∏è ‰∏ä‰∏ÄÈ†Å", data=f"cmd=view_companies&index={index - 1}"
                    )
                ),
            )
        if index < len(split_stocks) - 1:
            quick_reply_items.append(
                QuickReplyItem(
                    action=PostbackAction(
                        label="‚û°Ô∏è ‰∏ã‰∏ÄÈ†Å", data=f"cmd=view_companies&index={index + 1}"
                    )
                )
            )

        quick_reply_items.append(
            QuickReplyItem(
                action=PostbackAction(
                    label="üîé ÊêúÂ∞ãÂÖ¨Âè∏",
                    data="cmd=search_company",
                    input_option="openKeyboard",
                )
            )
        )

        await ctx.reply_template(
            "ÁÆ°ÁêÜÂÖ¨Âè∏",
            template=CarouselTemplate(columns=columns),
            quick_reply=QuickReply(items=quick_reply_items)
            if quick_reply_items
            else None,
        )
        return None

    @command
    async def delete_company(self, ctx: Context, stock_id: str) -> Any:
        user = await User.get(id=ctx.user_id)
        stock = await Stock.get(id=stock_id)
        await user.stocks.remove(stock)
        await ctx.reply_text(
            f"‚úñÔ∏è Â∑≤ÂèñÊ∂àËøΩËπ§ {stock}, ÊÇ®Â∞á‰∏çÊúÉÂÜçÊî∂Âà∞‰æÜËá™ {stock} ÁöÑÈáçÂ§ßË®äÊÅØÈÄöÁü•",
            quick_reply=QuickReply(
                [
                    QuickReplyItem(
                        PostbackAction(
                            label="‚ûï Êñ∞Â¢ûÂÖ¨Âè∏",
                            data="cmd=add_company",
                            input_option="openKeyboard",
                        )
                    ),
                    QuickReplyItem(
                        PostbackAction(label="üíº ÁÆ°ÁêÜÂÖ¨Âè∏", data="cmd=view_companies")
                    ),
                ]
            ),
        )

    @command
    async def view_news(self, ctx: Context, stock_id: str, index: int = 0) -> Any:
        stock = await Stock.get(id=stock_id).prefetch_related("news")
        news = await stock.news.all()
        if not news:
            return await ctx.reply_text(
                "ÁõÆÂâçÈÇÑÊ≤íÊúâÊé®Êí≠ÈÅé‰ªª‰ΩïÊ≠§ÂÖ¨Âè∏ÁöÑÈáçÂ§ßË®äÊÅØ",
                quick_reply=QuickReply(
                    [
                        QuickReplyItem(
                            PostbackAction(label="‚Ü©Ô∏è ËøîÂõû", data="cmd=view_companies")
                        )
                    ]
                ),
            )

        split_news = split_list(news, 10)
        columns: list[CarouselColumn] = []
        for news in split_news[index]:
            column = CarouselColumn(
                text=shorten(news.data["title"]),
                actions=[
                    PostbackAction(
                        "Êü•ÁúãË©≥ÊÉÖ", data=f"cmd=show_news_detail&news_id={news.id}&stock_id={stock_id}"
                    ),
                ],
            )
            columns.append(column)

        quick_reply_items: list[QuickReplyItem] = []
        if index > 0:
            quick_reply_items.append(
                QuickReplyItem(
                    action=PostbackAction(
                        label="‚¨ÖÔ∏è ‰∏ä‰∏ÄÈ†Å",
                        data=f"cmd=view_news&stock_id={stock_id}&index={index - 1}",
                    )
                ),
            )
        if index < len(split_news) - 1:
            quick_reply_items.append(
                QuickReplyItem(
                    action=PostbackAction(
                        label="‚û°Ô∏è ‰∏ã‰∏ÄÈ†Å",
                        data=f"cmd=view_news&stock_id={stock_id}&index={index + 1}",
                    )
                )
            )

        await ctx.reply_template(
            f"{stock} ÁôºÂ∏ÉÈÅéÁöÑÈáçÂ§ßË®äÊÅØ",
            template=CarouselTemplate(columns=columns),
            quick_reply=QuickReply(items=quick_reply_items)
            if quick_reply_items
            else None,
        )
        return None

    @command
    async def show_news_detail(self, ctx: Context, news_id: str, stock_id: str) -> None:
        news = await News.get(id=news_id)
        text = f"{news}\n\nhttps://goodinfo.tw/tw/StockDetail.asp?STOCK_ID={stock_id}"
        await ctx.reply_text(text)
